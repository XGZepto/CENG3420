# Implement Quicksort w.r.t. the following array in ascending order:
# -1 22 8 35 5 4 11 2 1 78
# Author: Zepto (Yixiang Zhou)
# 10/02/2022
# TAB SIZE: 8

.global _start
.data
array1: .word -1, 22, 8, 35, 5, 4, 11, 2, 1, 78
note: .asciz "current sorting range and pivot: "
blk: .asciz " "
msg: .asciz "\n"

.text
_start:
	la	a0, array1		
	li	a1, 0			
	li	a2, 9			
	call	quicksort
	li	a0, 0			# the exit code we will be returning is 0
	li	a7, 93			# calling exit(93)
	ecall

quicksort:
	# a0 stores the address of array, a1 and a2 indicate the range to be sorted
	bge	a1, a2, sorted		# boundary handling
	addi	sp, sp, -16		# allocate 16 bytes from the stack
	sw	ra, 0(sp)		# since we are making calls, we need the original ra and arguements
	sw	a0, 4(sp)		
	sw	a1, 8(sp)		
	sw	a2, 12(sp)		

	call	arraypartition		# call the arraypartition function

	lw	s4, 8(sp)
	add	s4, s4, a0		# a0 is the offsetted position of the new pivot location; offset it back.

debugmessage:
	lw	a2, 12(sp)
	lw	a1, 8(sp)
	li	a7, 4
	la	a0, note
	ecall
	li	a7, 1
	mv	a0, a1
	ecall
	li	a7, 4
	la	a0, blk
	ecall
	li	a7, 1
	mv	a0, a2
	ecall
	li	a7, 4
	la	a0, blk
	ecall
	li	a7, 1
	mv	a0, s4
	ecall
	li	a7, 4
	la	a0, msg
	ecall

	lw	a0, 4(sp)
	lw	a1, 8(sp)
	addi	a2, s4, -1
	call	quicksort

	lw	a0, 4(sp)
	addi	a1, s4, 1
	lw	a2, 12(sp)
	call	quicksort

	lw	ra, 0(sp)		# restore the original ra
	addi	sp, sp, 16		# deallocate the stack
sorted:
	jr	ra

swap:
	# a0 stores the address of array, and a1, a2 the indeces of the elements to be swapped
	beq	a1, a2, same		# no need to swap if they are the same
	slli	t1, a1, 2		# get the offset of a[j] relative
	slli	t2, a2, 2		# get the offset of a[k] releative
	add	t1, a0, t1
	add	t2, a0, t2
	lw	t0, 0(t1)
	lw	t3, 0(t2)
	sw	t3, 0(t1)
	sw	t0, 0(t2)
same:
	jr	ra			# return
	

arraypartition:
	# a0 stores the address of array, a1 and a2 indicate the range to be partitioned, and a2 be the pivot
	slli	t1, a1, 2		# get the offset
	add	a0, a0, t1
	sub 	a1, a2, a1		# a1 is now the index of the last elements in the array (and the pivot as well)
	# we have offseted the array so a0 becomes the address of the first element to be partitioned

	addi	sp, sp, -4		# allocate 16 bytes from the stack
	sw	ra, 0(sp)		# since we are making calls, we need the original ra
	slli	t0, a1, 2		# get the offset of the pivot element relative to v[0]
	add	t0, a0, t0		# get the address of the pivot element
	lw	s1, 0(t0)		# load the pivot element to s1, used as pivot
	mv	s0, a1	

	# loop from the beginning of the array to the end of the array
	li	s2, 0			# s2 stores the index of the array used to store smaller elements
	li	s3, 0			# s3 stores the index of elements that have been compared

loop: # For loop
	bge	s3, s0, end		# if s3 is greater than or equal to s0, break / end of loop
	slli	t4, s3, 2		# get the offset of the element
	add	t4, a0, t4		# get the address of the element
	lw	t5, 0(t4)		# load the element to t5
	ble	s1, t5, skipped		# if t5 is bigger than pivot, jump to 2; otherwise swap
	mv	a1, s2
	mv	a2, s3
	call	swap
	addi	s2, s2, 1	

skipped: # bottom of the loop
	addi	s3, s3, 1		# increment s3
	jal	x0, loop		# loop again

end:
	mv	a1, s0
	mv	a2, s2
	call	swap
	
	# Restore original ra and return
	lw	ra, 0(sp)
	addi	sp, sp, 4		# deallocate the stack
	mv	a0, s2			# return the new index of the pivot
	jr	ra			# return