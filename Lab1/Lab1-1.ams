# Write a RISC-V assembly program step by step as shown below:
#
# 1. Define two variables var1 and var2 which have initial value 15 and 19, respectively.
# 2. Print MEMORY addresses of var1 and var2 using syscall.
# 3. Increase var1 by 1 and multiply var2 by 4.
# 4. Print var1 and var2 again.
# 5. Swap var1 and var2 and print them. (var1 and var2 are changed)
# 
# Author: Zepto
# 19/01/2022

.globl _start
.data
var1: .word 15
var2: .word 19
msg: .asciz "\n"

.text
_start:
li a7, 1        # System call for PrintInt
la a0, var1     # Load var1 address
ecall           # Call syscall
li a7, 4        # System call for PrintString
la a0, msg      # Load endl address
ecall           # Call syscall

li a7, 1        # System call for PrintInt
la a0, var2     # Load var2 address
ecall           # Call syscall
li a7, 4        # System call for PrintString
la a0, msg      # Load endl address
ecall           # Call syscall
# Print MEMORY addresses of var1 and var2

la t2, var1     # Load var1 address
lw t1, (t2)     # Load var1 value
addi a0, t1, 1  # Add 1 to the value of var1
sw a0, (t2)     # Store the result to var1
li a7, 1        # System call for PrintInt
ecall           # Call syscall
li a7, 4        # System call for PrintString
la a0, msg      # Load endl address
ecall           # Call syscall
# Increase var1 by 1

la t2, var2     # Load var2 address
lw t1, (t2)     # Load var2 value
li t3, 2        # Assign 2 to t3
sll a0, t1, t3  # Assign var2 << 2 to a0
sw a0, (t2)     # Store the result to var2
li a7, 1        # System call for PrintInt
ecall           # Call syscall
li a7, 4        # System call for PrintString
la a0, msg      # Load endl address
ecall           # Call syscall
# Multiply var2 by 4

la t1, var1     # Load var1 address
la t2, var2     # Load var2 address
lw t3, (t1)     # Load var1 value
lw t4, (t2)     # Load var2 value
sw t4, (t1)     # Store var2 to var1 address
sw t3, (t2)     # Store var1 to var2 address
#Swap var1 and var2

li a7, 1        # System call for PrintInt
la t1, var1     # Load var1 address
lb a0, (t1)     # Load var1 value
ecall           # Call syscall
li a7, 4        # System call for PrintString
la a0, msg      # Load endl address
ecall           # Call syscall

li a7, 1        # System call for PrintInt
la t1, var2     # Load var2 address
lb a0, (t1)     # Load var2 value
ecall           # Call syscall
li a7, 4        # System call for PrintString
la a0, msg      # Load endl address
ecall           # Call syscall
# Print MEMORY addresses of var1 and var2